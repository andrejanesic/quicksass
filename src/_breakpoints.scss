/// Mixin for providing responsive content based on $breakpoints
/// @name bp-from
/// @param {String} $size - Breakpoint name (e.g. lg for desktop devices)
/// @content The content to be wrapped with media query
/// @output Content wrapped with media query on provided $size parameter
/// @require values, @see $breakpoints
@mixin bp-from($size: null) {
  /// If any screen size was provided
  @if $size != null {
    @if map-has-key($breakpoints, $size) {
      /// Print the content wrapped in media query
      @media (min-width: #{map-get($breakpoints, $size)}) { @content; }
    } @else {
      /// @throw Throws error if an invalid breapkoint size was given
      @error "Breakpoint \"#{$size}\" isn't defined in $breakpoints.";
    }
  }
  /// If no screen size was provided, return default
  @else {
    @content;
  }
}

/// Loops through given matrix of classes, props and values and sets them
/// for each of the responsive breakpoints.
/// @example set responsive display classes, @see display
/// @requires $breakpoints
@mixin make-responsive-class($classes) {
  @each $bp in (join(null, map-keys($breakpoints))) {

    /// If no breakpoint size specified (default value)
    $bp-infix: null;
    @if $bp != null {
      $bp-infix: "-#{$bp}";
    } @else {
      $bp-infix: "";
    }

    @include bp-from($bp) {
      @each $obj in $classes {
        $prefix: map-get($obj, "prefix");
        $suffix: map-get($obj, "suffix");
        $prop:   map-get($obj, "prop");
        $val:    map-get($obj, "val");
        @if $suffix != "" {
          $suffix: -#{$suffix};
        }
        .#{$prefix}#{$bp-infix}#{$suffix} {
          #{$prop}: #{$val};
          @content
        }
      }
    }
  }
}